import{_ as d,c as e,a2 as o,o as a}from"./chunks/framework.CehHI-68.js";const m=JSON.parse('{"title":"储存管理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/storage.md","filePath":"zh/guide/storage.md","lastUpdated":1757128899000}'),r={name:"guide/storage.md"};function c(s,t,i,l,p,h){return a(),e("div",null,t[0]||(t[0]=[o('<h1 id="storage" tabindex="-1">储存管理 <a class="header-anchor" href="#storage" aria-label="Permalink to &quot;储存管理 {#storage}&quot;">​</a></h1><p>储存是兰空图床中重要的组成部分之一，目前支持 <code>本地</code>、<code>AWS S3</code>、<code>阿里云 OSS</code>、<code>腾讯云 COS</code>、<code>七牛云 Kodo</code>、<code>又拍云 USS</code>、<code>Sftp</code>、<code>Ftp</code>、<code>Webdav</code>。</p><div class="tip custom-block"><p class="custom-block-title">需要 Minio 或 Backblaze b2 支持？</p><p>任何使用标准的<a href="https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html" target="_blank" rel="noreferrer">S3 API</a>接口协议的储存，都可以使用 <code>AWS S3</code> 来实现上传，包括 Minio 和 Backblaze b2。</p></div><h2 id="how-storage-works" tabindex="-1">储存是如何运作的 <a class="header-anchor" href="#how-storage-works" aria-label="Permalink to &quot;储存是如何运作的 {#how-storage-works}&quot;">​</a></h2><p>系统中可以创建多个储存，每一个储存可以选择一个驱动，即本地、S3、阿里云 OSS 等，选择不同的驱动类型则需要填写不同的配置信息。</p><p>储存可以设置图片文件储存的具体位置，甚至可以设置为系统目录，例如 <code>/root/photos</code>，但是需要注意，设置为系统目录可能存在权限相关问题。</p><p>正确的使用姿势应该是服务器挂载了一块大储存磁盘 <code>/mnt/mydisk</code>，然后设置为 <code>/mnt/mydisk/photos</code>。</p><p>创建或编辑储存时，程序会判断设置的路径是否存在，不存在则自动创建，并在 <code>public</code> 目录生成一个指向储存目录的<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/7177630" target="_blank" rel="noreferrer">符号链接</a>，从而实现文件储存在服务器的任何位置还能保证公网可以访问到图片。</p><h2 id="what-is-the-prefix" tabindex="-1">访问前缀是什么 <a class="header-anchor" href="#what-is-the-prefix" aria-label="Permalink to &quot;访问前缀是什么 {#what-is-the-prefix}&quot;">​</a></h2><p>为了实现文件储存在服务器任何位置还能保证公网可访问这个需求，我们就必须使用<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/7177630" target="_blank" rel="noreferrer">符号链接</a>，您可以通俗的将符号链接理解为 Windows 系统中的快捷方式。</p><p>假设我们的访问域名是 <code>http://localhost</code>，站点根目录为 <code>/www/wwwroot/app.com/public</code>。</p><p>按照惯例，如果我们在站点根目录上传一张图片 <code>test.png</code>，理论上我们的访问路径应该为 <code>http://localhost/test.png</code> ，而这种路径拼接的方式，文件被限制在了只能放在站点根目录，我们只能访问到站点根目录中的文件，即 <code>/www/wwwroot/app.com/public/test.png</code>。</p><p>而如果我们在站点根目录创建了一个符号链接 <code>uploads</code>，并且这个符号链接指向的实际储存位置为 <code>/www/wwwroot/data</code>，现在我们通过访问 <code>http://localhost/uploads/test.png</code> 时，这时候的实际文件路径为 <code>/www/wwwroot/data/test.png</code>。</p><p>访问前缀不仅起到了上述作用，程序还利用访问前缀来实现云处理功能（利用前缀获取指定的储存配置）。</p><p>所以，为了实现这个特性，程序中所有属于本地类型或开启了云处理的储存，都需要添加上这个访问前缀，导致 url 变的不好看。不过这是值得的。</p><h2 id="what-is-the-processor" tabindex="-1">处理器是什么 <a class="header-anchor" href="#what-is-the-processor" aria-label="Permalink to &quot;处理器是什么 {#what-is-the-processor}&quot;">​</a></h2><p>每个储存都可以分别设置一个图片安全驱动、图片处理驱动、云处理驱动。我们可以关联已创建的驱动，利用指定的驱动对储存的内容进行控制与处理。</p><ul><li>关联指定的图片安全驱动，任何上传到该储存的图片，都将会按照已选择的图片安全驱动进行审核。</li><li>关联指定的图片处理驱动，任何上传到该储存的图片，都将会按照已选择的图片处理驱动进行处理(裁切、水印、滤镜等)。</li><li>关联指定的云处理驱动，我们就可以通过 url 参数对该图片进行动态处理。</li></ul><h2 id="nameing-rules" tabindex="-1">支持的文件命名规则 <a class="header-anchor" href="#nameing-rules" aria-label="Permalink to &quot;支持的文件命名规则 {#nameing-rules}&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名称</th><th>示例值</th><th>解释</th></tr></thead><tbody><tr><td><code>{Y}</code></td><td>2024</td><td>当前年份</td></tr><tr><td><code>{y}</code></td><td>24</td><td>当前年份简写</td></tr><tr><td><code>{m}</code></td><td>01</td><td>当前月份</td></tr><tr><td><code>{d}</code></td><td>04</td><td>当前</td></tr><tr><td><code>{Ymd}</code></td><td>20240104</td><td>年月日</td></tr><tr><td><code>{filename}</code></td><td>吴彦祖的自拍照</td><td>文件名称(不带拓展名)</td></tr><tr><td><code>{ext}</code></td><td>png</td><td>文件拓展名</td></tr><tr><td><code>{time}</code></td><td>1718956160</td><td>时间戳</td></tr><tr><td><code>{uniqid}</code></td><td>667530e55196f</td><td>唯一ID</td></tr><tr><td><code>{md5}</code></td><td>e10adc3949ba59abbe56e057f20f883e</td><td>文件 md5 值</td></tr><tr><td><code>{sha1}</code></td><td>7c4a8d09ca3762af61e59520943dc26494f8941b</td><td>文件 sha1 值</td></tr><tr><td><code>{uuid}</code></td><td>ca083d36-1f0a-4d2a-83f7-f3e97f4f4bfa</td><td>UUID</td></tr><tr><td><code>{uid}</code></td><td>1</td><td>用户ID</td></tr></tbody></table>',20)]))}const u=d(r,[["render",c]]);export{m as __pageData,u as default};
