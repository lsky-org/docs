import{_ as a,c as n,a2 as i,o as e}from"./chunks/framework.CehHI-68.js";const u=JSON.parse('{"title":"迁移","description":"迁移兰空图床企业版","frontmatter":{"title":"迁移","description":"迁移兰空图床企业版"},"headers":[],"relativePath":"archive/enterprise/v1/quick-start/migration.md","filePath":"zh/archive/enterprise/v1/quick-start/migration.md","lastUpdated":1731937013000}'),p={name:"archive/enterprise/v1/quick-start/migration.md"};function t(l,s,c,o,d,h){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="迁移兰空图床" tabindex="-1">迁移兰空图床 <a class="header-anchor" href="#迁移兰空图床" aria-label="Permalink to &quot;迁移兰空图床&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">注意</p><p>由于程序使用了符号连接的方式实现其图片可以存在磁盘的任意位置，因此迁移兰空图床需要进行一些额外的操作。符号链接<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/7177630" target="_blank" rel="noreferrer">百度百科</a>，可以简单理解为 Windows 系统中的快捷方式。</p></div><h3 id="_1-打包" tabindex="-1">1. 打包 <a class="header-anchor" href="#_1-打包" aria-label="Permalink to &quot;1. 打包&quot;">​</a></h3><p>一般情况下，程序的 <code>public</code> 目录中会存在多个个系统保留目录名，目录结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>└─ public</span></span>
<span class="line"><span>   ├─ css           系统层叠式样式表</span></span>
<span class="line"><span>   ├─ fonts         系统字体文件</span></span>
<span class="line"><span>   ├─ i             程序默认本地储存的符号链接(可能不存在)</span></span>
<span class="line"><span>   ├─ img           系统图片文件</span></span>
<span class="line"><span>   ├─ js            系统 javascript 文件</span></span>
<span class="line"><span>   ├─ thumbnails    程序图片缩略图的符号链接</span></span>
<span class="line"><span>   ├─ uploads       系统图片上传的符号链接(例如相册封面、背景图等)</span></span>
<span class="line"><span>   └─ ...</span></span></code></pre></div><p>符号链接映射关系：</p><p><code>public/thumbnails</code> -&gt; <code>storage/app/thumbnails</code><br><code>public/uploads</code> -&gt; <code>storage/app/public</code><br><code>public/i</code> -&gt; <code>storage/app/uploads</code></p><p>迁移前，我们先将 <code>public</code> 中的 <code>thumbnails</code>、<code>uploads</code>、<code>i</code> 等所有符号链接删除。然后备份数据库，打包程序目录。</p><div class="tip custom-block"><p class="custom-block-title">为什么要删除符号链接？</p><p>如果不删除符号链接，打包压缩程序目录时，会将符号链接所指向的文件也打包进去，导致迁移后符号链接失效，无法找到对应的文件。</p></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>打包时请注意程序中 <code>.</code> 符号开头的文件，这些可能在某些文件管理程序中被隐藏，请不要忽略了这些文件。</p></div><h3 id="_2-准备新服务器" tabindex="-1">2. 准备新服务器 <a class="header-anchor" href="#_2-准备新服务器" aria-label="Permalink to &quot;2. 准备新服务器&quot;">​</a></h3><p>首先需要打开新服务器的 SSH 终端，使用命令查看 PHP 版本是否正确：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>然后确认该 PHP 版本的拓展是否都已经安装了：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fileinfo|mysqli|curl|mbstring|imagick|openssl|PDO|redis|session&#39;</span></span></code></pre></div><p>然后打开 <code>php.ini</code> 文件，搜索查找 <code>disable_functions</code>，将该值清空，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span>; This directive allows you to disable certain functions.</span></span>
<span class="line"><span>; It receives a comma-delimited list of function names.</span></span>
<span class="line"><span>; https://php.net/disable-functions</span></span>
<span class="line"><span>disable_functions = </span></span>
<span class="line"><span>...</span></span></code></pre></div><p>修改后重启 PHP 服务。 然后确保新服务器已安装 PHP 5.7+ 以及 Redis 7.0+。</p><h3 id="_3-迁移到新服务器" tabindex="-1">3. 迁移到新服务器 <a class="header-anchor" href="#_3-迁移到新服务器" aria-label="Permalink to &quot;3. 迁移到新服务器&quot;">​</a></h3><p>将打包后的代码和数据库文件，上传到新服务器站点目录解压，并导入数据库。</p><p>打开根目录 <code>.env</code> 文件，修改数据库连接信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>APP_DEBUG=true              开启调试模式</span></span>
<span class="line"><span>DB_CONNECTION=mysql         数据库类型</span></span>
<span class="line"><span>DB_HOST=127.0.0.1           数据库连接地址</span></span>
<span class="line"><span>DB_PORT=3306                数据库连接端口</span></span>
<span class="line"><span>DB_DATABASE=lsky_pro        数据库名称</span></span>
<span class="line"><span>DB_USERNAME=root            数据库用户名</span></span>
<span class="line"><span>DB_PASSWORD=root            数据库密码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>REDIS_HOST=127.0.0.1        Redis 连接地址，一般默认就好</span></span>
<span class="line"><span>REDIS_PASSWORD=null         Redis 连接密码，一般默认就好</span></span>
<span class="line"><span>REDIS_PORT=6379             Redis 连接端口，一般默认就好</span></span></code></pre></div><p>将以上配置修改为你的环境对应配置值，然后配置站点伪静态、运行目录、设置站点文件权限。具体操作可参考安装章节<a href="/docs/enterprise/v1/quick-start/installation.html#第二步-准备运行环境">第二步-准备运行环境</a></p><h3 id="_4-生成符号链接" tabindex="-1">4. 生成符号链接 <a class="header-anchor" href="#_4-生成符号链接" aria-label="Permalink to &quot;4. 生成符号链接&quot;">​</a></h3><p>进入 SSH 终端，进入站点目录，然后执行重新生成符号链接命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsky:symlinks</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>如果你使用了本地的储存策略，需要进入后台编辑该策略，重新保存一下以生成对应储存的符号连接。</p></div><h3 id="_5-配置异步队列和计划任务" tabindex="-1">5. 配置异步队列和计划任务 <a class="header-anchor" href="#_5-配置异步队列和计划任务" aria-label="Permalink to &quot;5. 配置异步队列和计划任务&quot;">​</a></h3><p>参考安装文档中的<a href="/docs/enterprise/v1/quick-start/installation.html#最后一步-命令行配置-重要">最后一步-命令行配置-重要</a>，配置配置异步队列和计划任务 <strong>(重要)</strong></p>`,29)]))}const k=a(p,[["render",t]]);export{u as __pageData,k as default};
