import{_ as i,c as l,a2 as n,j as e,a as t,G as c,B as o,o as r}from"./chunks/framework.CehHI-68.js";const f=JSON.parse('{"title":"缓存","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/cache.md","filePath":"zh/advanced/cache.md","lastUpdated":1757227305000}'),h={name:"advanced/cache.md"},p={id:"opcache",tabindex:"-1"};function d(k,a,m,u,b,g){const s=o("Badge");return r(),l("div",null,[a[3]||(a[3]=n('<h1 id="cache" tabindex="-1">缓存 <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;缓存 {#cache}&quot;">​</a></h1><p>合理的增加缓存可以极大的提高程序访问速度，提高程序运行效率，兰空图床使用 <a href="https://laravel.com" target="_blank" rel="noreferrer">Laravel</a> 框架开发，它提供了一些很方便的缓存命令。</p><p>注意，所有缓存命令都必须在程序安装完成且是生产环境下运行。</p><h2 id="cache-admin-icon" tabindex="-1">缓存后台管理页面图标 <a class="header-anchor" href="#cache-admin-icon" aria-label="Permalink to &quot;缓存后台管理页面图标 {#cache-admin-icon}&quot;">​</a></h2><p>后台管理使用了 <a href="https://filamentphp.com" target="_blank" rel="noreferrer">Filament</a>，而 Filament 使用了 <a href="https://blade-ui-kit.com/blade-icons" target="_blank" rel="noreferrer">Blade Icons</a> 包，它在缓存时有更好的性能。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> icons:cache</span></span></code></pre></div><h2 id="cache-all" tabindex="-1">缓存配置、事件、路由和视图 <a class="header-anchor" href="#cache-all" aria-label="Permalink to &quot;缓存配置、事件、路由和视图 {#cache-all}&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optimize</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>缓存后 <code>.env</code> 文件将不会被加载，所有对 <code>.env</code> 变量的 env 函数调用都将返回 null</li><li>升级兰图图床之前请务必使用命令 <code>php artisan optimize:clear</code> 清除缓存</li></ul></div>',9)),e("h2",p,[a[0]||(a[0]=t("OPcache 拓展 ")),c(s,{type:"tip",text:"推荐使用"}),a[1]||(a[1]=t()),a[2]||(a[2]=e("a",{class:"header-anchor",href:"#opcache","aria-label":'Permalink to "OPcache 拓展 <Badge type="tip" text="推荐使用" /> {#opcache}"'},"​",-1))]),a[4]||(a[4]=e("p",null,[t("PHP 的 "),e("a",{href:"https://www.php.net/manual/zh/book.opcache.php",target:"_blank",rel:"noreferrer"},"OPcache"),t(" 拓展可以将已编译的 PHP 代码存储在内存中，从而大幅提升性能。我们非常推荐您在生产环境中安装并启用 opcache 拓展。")],-1))])}const F=i(h,[["render",d]]);export{f as __pageData,F as default};
