import{_ as t,c as l,a2 as n,j as a,a as i,G as p,B as h,o as d}from"./chunks/framework.CehHI-68.js";const m=JSON.parse('{"title":"迁移","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migrate.md","filePath":"zh/guide/migrate.md","lastUpdated":1757387148000}'),o={name:"guide/migrate.md"},r={id:"configure-queue-and-schedule",tabindex:"-1"};function k(c,s,g,u,b,y){const e=h("Badge");return d(),l("div",null,[s[3]||(s[3]=n(`<h1 id="migrate" tabindex="-1">迁移 <a class="header-anchor" href="#migrate" aria-label="Permalink to &quot;迁移 {#migrate}&quot;">​</a></h1><p>本文将指导您如何将兰空图床从 A 服务器迁移到 B 服务器。</p><h2 id="create-new-website" tabindex="-1">创建新站点 <a class="header-anchor" href="#create-new-website" aria-label="Permalink to &quot;创建新站点 {#create-new-website}&quot;">​</a></h2><p>要将兰空图床迁移到另一台服务器上，需要先在目标服务器上创建新的站点，同样的，目标服务器的运行环境需要达到安装要求，具体请查看<a href="./requirement">环境要求</a>章节。</p><h2 id="delete-symbolic" tabindex="-1">移除符号链接 <a class="header-anchor" href="#delete-symbolic" aria-label="Permalink to &quot;移除符号链接 {#delete-symbolic}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>以下命令都需要在旧版本的根目录执行。</p></div><p>创建好新站点后，我们需要登录终端，进入要迁移的服务器站点根目录，第一步我们需要移除 <code>public</code> 目录下的<a href="https://baike.baidu.com/item/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/7177630" target="_blank" rel="noreferrer">符号链接</a>。</p><p>执行命令查看符号链接：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span></span></code></pre></div><p>执行后会输出所有符号链接，将符号链接删除：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">为什么需要删除符号链接？</p><ol><li>符号链接解引用，工具将符号链接指向的实际文件内容也打包进去，相当于复制目标文件到压缩包。</li><li>如果目标服务器的站点目录与旧服务器的目录结构不同，可能会造成符号链接存在但是为失效的状态。</li></ol></div><h2 id="packaging-files" tabindex="-1">打包文件 <a class="header-anchor" href="#packaging-files" aria-label="Permalink to &quot;打包文件 {#packaging-files}&quot;">​</a></h2><p>如果您使用 sqlite3，数据库文件默认位置为 <code>storage/app/database.sqlite</code>。</p><p>执行打包命令，压缩根目录中所有文件，并命名为 <code>lsky-pro.tar.gz</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -czvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsky-pro.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span></code></pre></div><p>打包完成后，将 <code>lsky-pro.tar.gz</code> 文件以任何方式上传到目标服务器的站点根目录。</p><p>此外，如果您使用了本地储存，并且在储存配置中，您将储存根目录设置为程序运行目录以外的文件夹；举例：假如您的站点目录为 <code>/www/wwwroot/app.com</code>，而您的储存设置的根目录为 <code>/mnt/data</code>，那么您还需要将目录 <code>/mnt/data</code> 压缩并转移到目标服务器。</p><h2 id="migrate-database" tabindex="-1">迁移数据库 <a class="header-anchor" href="#migrate-database" aria-label="Permalink to &quot;迁移数据库 {#migrate-database}&quot;">​</a></h2><p>如果您使用的是 sqlite3，数据库文件默认位置为 <code>storage/app/database.sqlite</code>，只要您没有调整这个文件的位置，那么在上一步「打包文件」中就已经一同打包进 <code>lsky-pro.tar.gz</code> 中了，不需要额外处理。</p><p>相反，如果您修改了该文件位置，您只需将该文件转移到目标服务器的指定位置，然后修改 <code>.env</code> 配置：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=laravel </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 laravel 替换成您的 sqlite 文件所在路径，例如：storage/app/database.sqlite</span></span></code></pre></div><p>如果您使用的是 mysql 或其他数据库，并且数据库是和站点是在同一个服务器中安装的，那么您可以登录数据库管理软件或使用终端的方式，导出数据库文件，并将文件转移至目标服务器中的数据库或其他远程数据库。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>兰空图床的数据库使用了<a href="https://baike.baidu.com/item/%E7%BA%A6%E6%9D%9F/12001448" target="_blank" rel="noreferrer">外键约束</a>，使用第三方软件备份时需要额外注意，有可能会因为外键约束这个特性造成了部分数据表丢失的情况。推荐使用 navicat 或 phpmyadmin 导出 sql 文件。</p></div><h2 id="restoring-installation" tabindex="-1">恢复安装 <a class="header-anchor" href="#restoring-installation" aria-label="Permalink to &quot;恢复安装 {#restoring-installation}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>以下命令都需要在目标服务器站点的根目录执行。</p></div><p>确保数据库、相关文件都转移到目标服务器后，我们需要使用终端进入目标服务器的站点根目录，执行解压命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xzvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsky-pro.tar.gz</span></span></code></pre></div><p>如果您使用的是 sqlite3，并且没有更改 sqlite3 数据库的文件位置。那么您可以不做任何改动。</p><p>如果您使用的是 sqlite3 以外的数据库，您需要解压后，使用 <code>vi</code> 或 <code>vim</code> 命令打开 <code>.env</code> 文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.env</span></span></code></pre></div><p>执行后按下键盘 <code>i</code> 键进入编辑模式，将数据配置更新为您的新站点需要的数据库(需提前导入)：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_CONNECTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=mysql </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库连接类型</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=127.0.0.1 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库连接地址</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=3306 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库连接端口</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=lsky_pro </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库名称</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_USERNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库连接账号</span></span>
<span class="line has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据库连接密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre></div><p>编辑完毕后，按 <code>esc</code> 退出编辑模式，然后按住键盘 <code>shift</code> + <code>:</code> 输入 <code>wq</code> 以保存并退出。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用了服务器控制面板，您完全可以使用控制面板更方便快捷的的文件管理来编辑该文件。</p></div><p>接下来执行命令生成符号链接：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storage:link</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --relative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> symlinks:rebuild</span></span></code></pre></div><p>别急，还没完，我们还需要像教程<a href="./install">安装</a>章节中那样，<a href="./install#configure-rewrite">配置站点运行目录以及伪静态</a>。</p><p>另外我们的新站点，记得确保根目录以及子目录的文件夹、文件的用户组都是 web 服务器运行的用户，即 <code>www</code> 或 <code>www-data</code>。</p><h2 id="change-configuration" tabindex="-1">更改配置 <a class="header-anchor" href="#change-configuration" aria-label="Permalink to &quot;更改配置 {#change-configuration}&quot;">​</a></h2><p>如果您使用了本地储存，本地储存的<strong>储存目录</strong>配置也许会在您迁移了新的服务器后路径发生了变化，这个时候需要您去登录程序后台，将储存配置的<strong>储存目录</strong>路径，修改成现在所在服务器的储存根路径。</p><p>即使路径没有发生变化，您也需要编辑所有的储存，重新保存一下以生成符号链接。</p><p>除此之外：</p><ul><li>所有「云处理」驱动器需要去确认一下<strong>云处理缓存目录</strong>配置路径是否正确。</li><li>所有「图片安全」驱动器需要去确认一下<strong>违规图片转移目录</strong>配置路径是否正确。(如果有设置)</li></ul>`,44)),a("h2",r,[s[0]||(s[0]=i("配置消息队列和计划任务 ")),p(e,{type:"danger",text:"重要"}),s[1]||(s[1]=i()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#configure-queue-and-schedule","aria-label":'Permalink to "配置消息队列和计划任务 <Badge type="danger" text="重要" /> {#configure-queue-and-schedule}"'},"​",-1))]),s[4]||(s[4]=a("p",null,[i("最后一步，"),a("strong",null,"请不要忽略了这一步"),i("。我们需要像教程"),a("a",{href:"./install"},"安装"),i("章节中那样，"),a("a",{href:"./install#configure-queue"},"配置消息队列"),i(" 和 "),a("a",{href:"./install#configure-schedule"},"配置计划任务"),i("。")],-1)),s[5]||(s[5]=a("p",null,"配置完毕后，通过新站点的域名访问前端，测试功能是否正常。",-1))])}const E=t(o,[["render",k]]);export{m as __pageData,E as default};
